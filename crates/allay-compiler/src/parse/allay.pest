WHITESPACE = _{ " " | "\t" | "\r" }

file = { SOI ~ template ~ EOI }

template = { control* }
control = { text | shortcode | command | substitution }

text = { (!("{-" | "{<" | "{:" ) ~ ANY)+ }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" )* }
variable = { "$" ~ identifier }
get_field = { "." ~ (identifier | number) }
this = { "this" }
param = { "param" }
top_level = { this | variable | param }
number = @{ "-"? ~ ASCII_DIGIT+ }
inner_string = @{ ( "\\\"" | !("\"") ~ ANY )* }
string = ${ "\"" ~ inner_string ~ "\"" }
add_op = { "+" | "-" }
mul_op = { "*" | "/" | "%" }
comparison_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
and_op = { "&&" }
or_op = { "||" }
not_op = { "!" }

expression = { logic_or }
logic_or = { logic_and ~ (or_op ~ logic_and)* }
logic_and = { comparison ~ (and_op ~ comparison)* }
comparison = { addition ~ (comparison_op ~ addition)? }
addition = { multiplication ~ (add_op ~ multiplication)* }
multiplication = { unary ~ (mul_op ~ unary)* }
unary = { (not_op | add_op)? ~ primary }
field = ${ top_level? ~ get_field+ }
bool_literal = { "#t" | "#f" }
primary = { field | top_level | number | string | bool_literal | "(" ~ expression ~ ")" }

shortcode = { single_shortcode | block_shortcode }
shortcode_pattern = ${ identifier ~ WHITESPACE }
single_shortcode = { "{<" ~ shortcode_pattern ~ expression* ~ "/>}" }
block_shortcode = { "{<" ~ shortcode_pattern ~ expression* ~ ">}" ~ template ~ "{</" ~ identifier ~ ">}" }

command = { set_command | for_command | with_command | if_command | include_command }

for_pattern = ${ "for" ~ WHITESPACE }
start_for_command = { "{-" ~ for_pattern ~ variable ~ ("," ~ variable)? ~ ":" ~ expression ~ "-}" }
with_pattern = ${ "with" ~ WHITESPACE }
start_with_command = { "{-" ~ with_pattern ~ expression ~ "-}" }
if_pattern = ${ "if" ~ WHITESPACE }
start_if_command = { "{-" ~ if_pattern ~ expression ~ "-}" }
else_command = { "{-" ~ "else" ~ "-}" }
end_command = { "{-" ~ "end" ~ "-}" }

set_pattern = ${ "set" ~ WHITESPACE }
set_command = { "{-" ~ set_pattern ~ variable ~ "=" ~ expression ~ "-}" }
for_command = { start_for_command ~ template ~ end_command }
with_command = { start_with_command ~ template ~ end_command }
if_command = { start_if_command ~ template ~ (else_command ~ template)? ~ end_command }
include_pattern = ${ "include" ~ WHITESPACE }
include_command = { "{-" ~ include_pattern ~ string ~ expression* ~ "-}" }

substitution = { get_substitution | expr_substitution }
get_pattern = ${ "get" ~ WHITESPACE }
get_substitution = { "{:" ~ get_pattern ~ expression ~ ":}" }
expr_substitution = { "{:" ~ expression ~ ":}" }
